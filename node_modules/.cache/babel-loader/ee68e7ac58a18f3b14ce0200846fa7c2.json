{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\n\nfunction useSticky() {\n  _s();\n\n  const [isSticky, setSticky] = useState(false);\n  const element = useRef(null);\n\n  const handleScroll = () => {\n    window.scrollY > element.current.getboundingClientRect().bottom ? setSticky(true) : setSticky(false);\n  };\n\n  const debounce = (func, wait = 20, immediate = true) => {\n    let timeOut;\n    return () => {\n      let context = this,\n          args = arguments;\n\n      const later = () => {\n        timeOut = null;\n        if (!immediate) func.apply(context, args);\n      };\n\n      const callNow = immediate && !timeOut;\n      clearTimeout(timeOut);\n      timeOut = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", debounce(handleScroll));\n    return () => {\n      window.removeEventListener(\"scroll\", () => handleScroll);\n    };\n  }, [debounce, handleScroll]);\n  return {\n    isSticky,\n    element\n  };\n}\n\n_s(useSticky, \"LZR3uTxto6+Bh+TvKd7BTAN08Qg=\");\n\nexport default useSticky;","map":{"version":3,"sources":["/Users/viviancheung/Desktop/TTB2020/src/useSticky.js"],"names":["useEffect","useState","useRef","useSticky","isSticky","setSticky","element","handleScroll","window","scrollY","current","getboundingClientRect","bottom","debounce","func","wait","immediate","timeOut","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","addEventListener","removeEventListener"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,EAA6BC,MAA7B,QAA0C,OAA1C;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AACjB,QAAM,CAACC,QAAD,EAAWC,SAAX,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMK,OAAO,GAAGJ,MAAM,CAAC,IAAD,CAAtB;;AAEA,QAAMK,YAAY,GAAG,MAAM;AACvBC,IAAAA,MAAM,CAACC,OAAP,GAAiBH,OAAO,CAACI,OAAR,CAAgBC,qBAAhB,GAAwCC,MAAzD,GACMP,SAAS,CAAC,IAAD,CADf,GAEMA,SAAS,CAAC,KAAD,CAFf;AAGH,GAJD;;AAMA,QAAMQ,QAAQ,GAAG,CAACC,IAAD,EAAOC,IAAI,GAAG,EAAd,EAAkBC,SAAS,GAAG,IAA9B,KAAuC;AACpD,QAAIC,OAAJ;AACA,WAAO,MAAM;AACT,UAAIC,OAAO,GAAG,IAAd;AAAA,UAAoBC,IAAI,GAAGC,SAA3B;;AACA,YAAMC,KAAK,GAAG,MAAM;AAChBJ,QAAAA,OAAO,GAAG,IAAV;AACA,YAAI,CAACD,SAAL,EAAgBF,IAAI,CAACQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AACnB,OAHD;;AAIA,YAAMI,OAAO,GAAGP,SAAS,IAAI,CAACC,OAA9B;AACAO,MAAAA,YAAY,CAACP,OAAD,CAAZ;AACAA,MAAAA,OAAO,GAAGQ,UAAU,CAACJ,KAAD,EAAQN,IAAR,CAApB;AACA,UAAIQ,OAAJ,EAAaT,IAAI,CAACQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AAChB,KAVD;AAWH,GAbD;;AAeAnB,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,EAAkCb,QAAQ,CAACN,YAAD,CAA1C;AACA,WAAO,MAAM;AACTC,MAAAA,MAAM,CAACmB,mBAAP,CAA2B,QAA3B,EAAqC,MAAMpB,YAA3C;AACH,KAFD;AAGH,GALQ,EAKN,CAACM,QAAD,EAAWN,YAAX,CALM,CAAT;AAOA,SAAO;AAAEH,IAAAA,QAAF;AAAYE,IAAAA;AAAZ,GAAP;AACH;;GAjCQH,S;;AAkCT,eAAeA,SAAf","sourcesContent":["import {useEffect, useState, useRef} from 'react'\n\nfunction useSticky() {\n    const [isSticky, setSticky] = useState(false)\n    const element = useRef(null)\n\n    const handleScroll = () => {\n        window.scrollY > element.current.getboundingClientRect().bottom\n            ? setSticky(true)\n            : setSticky(false)\n    }\n\n    const debounce = (func, wait = 20, immediate = true) => {\n        let timeOut\n        return () => {\n            let context = this, args = arguments\n            const later = () => {\n                timeOut = null\n                if (!immediate) func.apply(context, args)\n            }\n            const callNow = immediate && !timeOut\n            clearTimeout(timeOut)\n            timeOut = setTimeout(later, wait)\n            if (callNow) func.apply(context, args)\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", debounce(handleScroll))\n        return () => {\n            window.removeEventListener(\"scroll\", () => handleScroll)\n        }\n    }, [debounce, handleScroll])\n\n    return { isSticky, element }\n}\nexport default useSticky\n"]},"metadata":{},"sourceType":"module"}