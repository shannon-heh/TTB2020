{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/i818433/Desktop/TTB2020/src/Prediction.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\n\nconst axios = require('axios');\n\nconst MONTH_INDEX = 6;\nconst DATA_UNAVAILABLE = \"Sorry! Not enough data available.\";\nconst KELVIN_MULT = 9 / 5;\nconst KELVIN_CONST = -459.67;\nconst RISK = {\n  NODATA: \"Sorry, we don't have enough data to make predictions today.\",\n  NONE: \"Yay, no risk of fire!\",\n  LITTLE: \"It is unlikely that there is a fire in your area, but beware of higher temperatures, stronger winds, and drier conditions.\",\n  MEDIUM: \"Beware of potential fires in your area! Stay up to date with local forecasts for further info.\",\n  HIGH: \"There is very likely a fire in your area! Please read our Community section for help in preparing.\"\n};\nexport const Prediction = () => {\n  _s();\n\n  const [weather, setWeather] = useState({});\n  const [history, setHistory] = useState({});\n  const [riskLevel, setLevel] = useState(\"\");\n  const [prediction, setPrediction] = useState(false);\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n\n  const fetchPrediction = () => {\n    let riskFactor = 0;\n    let numValid = 0;\n    ;\n\n    if (history[\"temp\"] !== DATA_UNAVAILABLE) {\n      numValid++;\n      if (weather[\"temp\"] >= history[\"temp\"] - 10) riskFactor++;\n    }\n\n    if (weather[\"type\"] === \"Thunderstorm\" || weather[\"type\"] === \"Smoke\" || weather[\"type\"] === \"Haze\") riskFactor++;\n    if (history[\"prcp\"] !== DATA_UNAVAILABLE) numValid++;\n\n    if (history[\"wind\"] !== DATA_UNAVAILABLE) {\n      numValid++;\n      if (weather[\"wind\"] >= history[\"wind\"] - 1) riskFactor++;\n    }\n\n    if (numValid == 0) setLevel(RISK.NODATA);else if (riskFactor == 3) setLevel(RISK.HIGH);else if (riskFactor == 2) setLevel(RISK.MEDIUM);else if (riskFactor == 1) setLevel(RISK.LITTLE);else if (riskFactor == 0) setLevel(RISK.NONE);\n    console.log(riskLevel);\n  };\n\n  const onSubmit = data => {\n    const lat = data.latitude;\n    const lon = data.longitude;\n    const apikey = '4442842ee5abc16c9caa8989d5335c42';\n    const owmUrl = 'http://api.openweathermap.org/data/2.5/weather?lat=' + lat + '&lon=' + lon + '&appid=' + apikey;\n    axios.get(owmUrl).then(res => {\n      const weatherData = res.data;\n      const currWeather = {\n        \"temp\": 0,\n        \"wind\": 0,\n        \"type\": \"\"\n      };\n      currWeather[\"temp\"] = KELVIN_MULT * weatherData.main.temp + KELVIN_CONST;\n      currWeather[\"wind\"] = weatherData.wind.speed;\n      currWeather[\"type\"] = weatherData.weather[0].main;\n      setWeather(currWeather);\n    });\n    const historyUrl = 'http://localhost:3001/weather_month?LATITUDE=' + lat + '&LONGITUDE=' + lon;\n    console.log(historyUrl);\n    axios.get(historyUrl).then(res => {\n      let maxTemp = 0,\n          prcp = 0,\n          wind = 0;\n      let numTemp = 0,\n          numPrcp = 0,\n          numWind = 0;\n      let avgTemp = -1,\n          avgPrcp = -1,\n          avgWind = -1;\n      res.data.forEach(entry => {\n        const month = entry[\"DATE\"].charAt(MONTH_INDEX);\n\n        if (month >= 6 && month <= 9) {\n          if (entry[\"EMXT\"] !== \"\") {\n            maxTemp += entry[\"EMXT\"];\n            numTemp++;\n          }\n\n          if (entry[\"PRCP\"] !== \"\") {\n            prcp += entry[\"PRCP\"];\n            numPrcp++;\n          }\n\n          if (entry[\"WSF2\"] !== \"\") {\n            wind += entry[\"WSF2\"];\n            numWind++;\n          }\n        }\n      });\n      if (numTemp > 1) avgTemp = maxTemp / numTemp;else avgTemp = DATA_UNAVAILABLE;\n      if (numPrcp > 1) avgPrcp = prcp / numPrcp;else avgPrcp = DATA_UNAVAILABLE;\n      if (wind > 1) avgWind = wind / numWind;else avgWind = DATA_UNAVAILABLE;\n      setHistory({\n        \"temp\": avgTemp,\n        \"prcp\": avgPrcp,\n        \"wind\": avgWind\n      });\n      setPrediction(true);\n    });\n    fetchPrediction();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"form\",\n      onSubmit: handleSubmit(onSubmit),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"latitude\",\n          placeholder: \"Your Latitude\",\n          ref: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"longitude\",\n          placeholder: \"Your Longitude\",\n          ref: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          placeholder: \"Enter\",\n          value: \"Enter\",\n          style: {\n            height: \"10eem\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), prediction && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", weather[\"temp\"]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind speed: \", weather[\"wind\"]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Weather type: \", weather[\"type\"]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Avg temp: \", history[\"temp\"]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Avg prcp: \", history[\"prcp\"]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Avg wind: \", history[\"wind\"]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Risk level: \", riskLevel]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n\n_s(Prediction, \"aK7Ra5eF30pE7v7psTFkDyQOEEQ=\", false, function () {\n  return [useForm];\n});\n\n_c = Prediction;\n\nvar _c;\n\n$RefreshReg$(_c, \"Prediction\");","map":{"version":3,"sources":["/Users/i818433/Desktop/TTB2020/src/Prediction.js"],"names":["React","useState","useForm","axios","require","MONTH_INDEX","DATA_UNAVAILABLE","KELVIN_MULT","KELVIN_CONST","RISK","NODATA","NONE","LITTLE","MEDIUM","HIGH","Prediction","weather","setWeather","history","setHistory","riskLevel","setLevel","prediction","setPrediction","register","handleSubmit","fetchPrediction","riskFactor","numValid","console","log","onSubmit","data","lat","latitude","lon","longitude","apikey","owmUrl","get","then","res","weatherData","currWeather","main","temp","wind","speed","historyUrl","maxTemp","prcp","numTemp","numPrcp","numWind","avgTemp","avgPrcp","avgWind","forEach","entry","month","charAt","height"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { useForm } from \"react-hook-form\";\n\nconst axios = require('axios');\n\nconst MONTH_INDEX = 6;\nconst DATA_UNAVAILABLE = \"Sorry! Not enough data available.\";\nconst KELVIN_MULT = 9/5;\nconst KELVIN_CONST = -459.67;\nconst RISK = {\n    NODATA: \"Sorry, we don't have enough data to make predictions today.\",\n    NONE: \"Yay, no risk of fire!\",\n    LITTLE: \"It is unlikely that there is a fire in your area, but beware of higher temperatures, stronger winds, and drier conditions.\",\n    MEDIUM: \"Beware of potential fires in your area! Stay up to date with local forecasts for further info.\",\n    HIGH: \"There is very likely a fire in your area! Please read our Community section for help in preparing.\"\n}\n\nexport const Prediction = () => {\n    const [weather,setWeather]=useState({});\n    const [history, setHistory]=useState({});\n    const [riskLevel, setLevel] = useState(\"\");\n    const [prediction,setPrediction]=useState(false);\n    const {register, handleSubmit} = useForm();\n\n    const fetchPrediction = () => {\n        let riskFactor = 0;\n        let numValid = 0;;\n        if(history[\"temp\"] !== DATA_UNAVAILABLE) {\n            numValid++;\n            if(weather[\"temp\"] >= history[\"temp\"] - 10) \n                riskFactor++;\n        }\n        if(weather[\"type\"] === \"Thunderstorm\" || weather[\"type\"] === \"Smoke\" \n            || weather[\"type\"] === \"Haze\") \n                riskFactor++;\n        if(history[\"prcp\"] !== DATA_UNAVAILABLE)\n            numValid++;\n        if(history[\"wind\"] !== DATA_UNAVAILABLE) {\n            numValid++;\n            if(weather[\"wind\"] >= history[\"wind\"] - 1) \n                riskFactor++;\n        }\n        if(numValid == 0) setLevel(RISK.NODATA);\n        else if(riskFactor == 3) setLevel(RISK.HIGH);\n        else if(riskFactor == 2) setLevel(RISK.MEDIUM);\n        else if(riskFactor == 1) setLevel(RISK.LITTLE);\n        else if(riskFactor == 0) setLevel(RISK.NONE);\n        console.log(riskLevel);\n\n    }\n\n    const onSubmit = data => { \n        const lat = data.latitude;\n        const lon = data.longitude;\n        const apikey = '4442842ee5abc16c9caa8989d5335c42';\n        const owmUrl = 'http://api.openweathermap.org/data/2.5/weather?lat='+lat+'&lon='+lon+'&appid='+apikey;                     \n        axios.get(owmUrl)\n        .then(res => {\n            const weatherData = res.data;\n            const currWeather = {\n                \"temp\": 0,\n                \"wind\": 0,\n                \"type\": \"\"\n            }\n            currWeather[\"temp\"] = KELVIN_MULT*weatherData.main.temp+KELVIN_CONST;\n            currWeather[\"wind\"] = weatherData.wind.speed;\n            currWeather[\"type\"] = weatherData.weather[0].main;\n            setWeather(currWeather);\n        });\n        const historyUrl = 'http://localhost:3001/weather_month?LATITUDE='+lat+'&LONGITUDE='+lon;\n        console.log(historyUrl);\n        axios.get(historyUrl)\n        .then(res => {\n            let maxTemp = 0, prcp = 0, wind = 0;\n            let numTemp = 0, numPrcp = 0, numWind = 0;\n            let avgTemp = -1, avgPrcp = -1, avgWind = -1;\n            res.data.forEach(entry => {\n                const month = entry[\"DATE\"].charAt(MONTH_INDEX);\n                if(month >= 6 && month <= 9) {\n                    if(entry[\"EMXT\"] !== (\"\")) {\n                        maxTemp += entry[\"EMXT\"];\n                        numTemp++;\n                    }\n                    if(entry[\"PRCP\"] !== (\"\")) {\n                        prcp += entry[\"PRCP\"];\n                        numPrcp++;\n                    }\n                    if(entry[\"WSF2\"] !== (\"\")) {\n                        wind += entry[\"WSF2\"];\n                        numWind++;\n                    }\n                }\n            });\n            if(numTemp > 1) avgTemp = maxTemp/numTemp;\n            else avgTemp = DATA_UNAVAILABLE;\n            if(numPrcp > 1) avgPrcp = prcp/numPrcp;\n            else avgPrcp = DATA_UNAVAILABLE;\n            if(wind > 1) avgWind = wind/numWind;\n            else avgWind = DATA_UNAVAILABLE;\n            setHistory({\n                \"temp\": avgTemp, \n                \"prcp\": avgPrcp, \n                \"wind\": avgWind}\n            );\n            setPrediction(true);\n        });\n        fetchPrediction();\n    };\n\n    return (\n        <>\n            <form id=\"form\" onSubmit={handleSubmit(onSubmit)}>\n                <div>\n                    <input name=\"latitude\" placeholder=\"Your Latitude\" ref={register} />\n                    <input name=\"longitude\" placeholder=\"Your Longitude\" ref={register} />\n                    <input type=\"submit\" placeholder=\"Enter\" value = \"Enter\" \n                        style={{height:\"10eem\"}}\n                    />\n                </div>\n            </form>\n            {prediction && (\n                <>\n                    <p>Temperature: {weather[\"temp\"]}</p>\n                    <p>Wind speed: {weather[\"wind\"]}</p>\n                    <p>Weather type: {weather[\"type\"]}</p>\n                    <p>Avg temp: {history[\"temp\"]}</p>\n                    <p>Avg prcp: {history[\"prcp\"]}</p>\n                    <p>Avg wind: {history[\"wind\"]}</p>\n                    <p>Risk level: {riskLevel}</p>\n                </>\n            )\n            }\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}